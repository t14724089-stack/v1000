#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Gerador de Provas Visuais
Sistema avan√ßado para cria√ß√£o de provas visuais instant√¢neas (PROVIs)
"""

import time
import random
import logging
import json
from datetime import datetime
from typing import Dict, List, Optional, Any
from services.ai_manager import ai_manager
from services.auto_save_manager import salvar_etapa, salvar_erro

logger = logging.getLogger(__name__)

class VisualProofsGenerator:
    """Diretor Supremo de Experi√™ncias Transformadoras"""

    def __init__(self):
        """Inicializa gerador de provas visuais"""
        self.categorias_provis = {
            "URGENCIA": {
                "descricao": "Demonstra necessidade imediata de a√ß√£o",
                "gatilho": "Escassez temporal",
                "impacto": "Alto",
                "exemplos": ["Ampulheta gigante", "Rel√≥gio regressivo f√≠sico", "Cartas queimando"]
            },
            "METODO": {
                "descricao": "Prova a efic√°cia do m√©todo proposto",
                "gatilho": "Confian√ßa no processo",
                "impacto": "Muito Alto",
                "exemplos": ["Experimento com plantas", "Antes/depois f√≠sico", "Demonstra√ß√£o cient√≠fica"]
            },
            "RESULTADO": {
                "descricao": "Mostra resultados tang√≠veis poss√≠veis",
                "gatilho": "Desejo de transforma√ß√£o",
                "impacto": "Alto",
                "exemplos": ["Transforma√ß√£o visual", "Crescimento medido", "Compara√ß√£o f√≠sica"]
            },
            "ESCASSEZ": {
                "descricao": "Demonstra limita√ß√£o real de acesso",
                "gatilho": "Medo de perder oportunidade",
                "impacto": "M√©dio-Alto",
                "exemplos": ["Vagas limitadas visualmente", "Recursos finitos", "Acesso exclusivo"]
            },
            "AUTORIDADE": {
                "descricao": "Estabelece credibilidade sem arrog√¢ncia",
                "gatilho": "Confian√ßa na lideran√ßa",
                "impacto": "Alto",
                "exemplos": ["Certificados f√≠sicos", "Reconhecimento visual", "Expertise demonstrada"]
            },
            "TRANSFORMACAO": {
                "descricao": "Mostra mudan√ßa radical poss√≠vel",
                "gatilho": "Esperan√ßa de mudan√ßa",
                "impacto": "Muito Alto",
                "exemplos": ["Metamorfose visual", "Evolu√ß√£o demonstrada", "Salto qu√¢ntico"]
            }
        }

        self.materiais_basicos = [
            "Pap√©is coloridos", "Marcadores", "Ampulheta", "Balan√ßa", "Plantas",
            "√çm√£s", "Copos transparentes", "Cordas", "Pedras", "Velas",
            "Cron√¥metro", "R√©gua", "Espelho", "Lupa", "Livros"
        ]
        self.tipos_prova = [
            "screenshots",
            "depoimentos",
            "estudos_caso",
            "metricas",
            "comparativos",
            "certificacoes"
        ]

        self.ai_manager = ai_manager # Atribui a inst√¢ncia de ai_manager

        logger.info("Visual Proofs Generator inicializado")

    def generate_proofs(self, mental_drivers: Dict[str, Any], session_id: str = None) -> Dict[str, Any]:
        """Gera provas visuais baseadas nos drivers mentais"""
        try:
            logger.info("üé≠ Gerando provas visuais...")

            proofs = {
                "provas_geradas": [],
                "tipos_utilizados": [],
                "scripts_visuais": []
            }

            # Gera provas baseadas nos drivers
            if isinstance(mental_drivers, dict) and 'drivers_customizados' in mental_drivers:
                drivers = mental_drivers['drivers_customizados']
                if isinstance(drivers, list):
                    for i, driver in enumerate(drivers[:6]):  # Top 6 drivers
                        if isinstance(driver, dict) and 'nome' in driver:
                            proof_type = self.tipos_prova[i % len(self.tipos_prova)]
                            proofs["provas_geradas"].append({
                                "conceito": driver['nome'],
                                "tipo": proof_type,
                                "descricao": f"Prova visual {proof_type} para {driver['nome']}",
                                "url_placeholder": f"https://example.com/proof_{i+1}.jpg"
                            })

                            if proof_type not in proofs["tipos_utilizados"]:
                                proofs["tipos_utilizados"].append(proof_type)

            # Scripts visuais
            proofs["scripts_visuais"] = [
                "Mostrar resultados em tempo real",
                "Comparativo antes/depois",
                "Depoimentos em v√≠deo"
            ]

            logger.info(f"‚úÖ {len(proofs['provas_geradas'])} provas visuais geradas")
            return proofs

        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar provas visuais: {e}")
            return {
                "provas_geradas": [],
                "tipos_utilizados": [],
                "scripts_visuais": [],
                "error": str(e)
            }

    def generate_visual_proofs(self, drivers_data: Dict[str, Any], segmento: str = "", produto: str = "", session_id: str = "") -> List[Dict[str, Any]]:
        """Gera provas visuais abrangentes para o segmento"""
        try:
            logger.info(f"üé≠ Gerando provas visuais para {segmento} - {produto}")

            prompt = f"""
Crie 3 provas visuais (PROVIs) poderosas para o segmento "{segmento}" com produto "{produto}".

Para cada PROVI, forne√ßa:
1. Nome impactante
2. Conceito-alvo que vai provar
3. Categoria (Destruidora de Obje√ß√£o, Criadora de Urg√™ncia, Instaladora de Cren√ßa)
4. Experimento/demonstra√ß√£o espec√≠fica
5. Analogia perfeita
6. Roteiro completo de execu√ß√£o
7. Materiais necess√°rios

Formato JSON:
{{
    "provis": [
        {{
            "nome": "PROVI 1: Nome Impactante",
            "conceito_alvo": "O que vai provar",
            "categoria": "Tipo de prova",
            "prioridade": "Cr√≠tica/Alta/M√©dia",
            "objetivo_psicologico": "Efeito na mente",
            "experimento": "Demonstra√ß√£o espec√≠fica",
            "analogia_perfeita": "Assim como...",
            "roteiro_completo": {{
                "setup": "Como preparar",
                "execucao": "Como executar",
                "climax": "Momento de maior impacto",
                "bridge": "Como conectar ao produto"
            }},
            "materiais": ["item1", "item2"],
            "variacoes": {{
                "online": "Vers√£o online",
                "grande_publico": "Para muitas pessoas",
                "intimista": "Para grupos pequenos"
            }},
            "plano_b": "O que fazer se der errado"
        }}
    ]
}}
"""

            # Adapta√ß√£o para usar a assinatura correta e tratamento de erros
            try:
                full_context = {
                    'segmento': segmento,
                    'produto': produto,
                    'dados_contexto': drivers_data # Assumindo que drivers_data pode ser usado como contexto
                }
                response = self.ai_manager.generate_analysis(
                    prompt=prompt,
                    model=None, # Ou especifique um modelo se necess√°rio
                    context=full_context
                )

                if response is None:
                    logger.warning("‚ö†Ô∏è AI Manager retornou resposta None - usando fallback")
                    return self._create_fallback_provis(segmento, produto)
                elif isinstance(response, dict) and 'provis' in response:
                    provis_data = response['provis']
                    return provis_data
                elif isinstance(response, str):
                    # Tenta parsear se for uma string contendo JSON
                    try:
                        provis_data = json.loads(response)
                        return provis_data.get('provis', [])
                    except json.JSONDecodeError:
                        logger.warning("‚ö†Ô∏è AI Manager retornou string inv√°lida - usando fallback")
                        return self._create_fallback_provis(segmento, produto)
                else:
                    logger.warning(f"‚ö†Ô∏è Resposta inesperada do AI Manager: {type(response)} - usando fallback")
                    return self._create_fallback_provis(segmento, produto)

            except Exception as ai_error:
                logger.error(f"‚ùå Erro durante chamada ao AI Manager: {ai_error}")
                return self._create_fallback_provis(segmento, produto)

        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar provas visuais: {e}")
            return self._create_fallback_provis(segmento, produto)

    def _create_fallback_provis(self, segmento, produto):
        """Cria PROVIs de fallback quando IA falha"""
        return [
            {
                "nome": f"PROVI 1: Demonstra√ß√£o {produto}",
                "conceito_alvo": f"Provar que {produto} realmente funciona",
                "categoria": "Destruidora de Obje√ß√£o",
                "prioridade": "Cr√≠tica",
                "objetivo_psicologico": f"Quebrar ceticismo sobre {produto}",
                "experimento": f"Demonstra√ß√£o pr√°tica de {produto}",
                "analogia_perfeita": f"Assim como voc√™ pode ver {produto} funcionando, voc√™ pode ter os mesmos resultados",
                "roteiro_completo": {
                    "setup": f"Prepare exemplo de {produto}",
                    "execucao": f"Mostre {produto} em a√ß√£o",
                    "climax": "Revele o resultado final",
                    "bridge": f"Conecte ao potencial da audi√™ncia com {produto}"
                },
                "materiais": [f"Exemplo de {produto}", "Material de demonstra√ß√£o"],
                "variacoes": {
                    "online": "Vers√£o digital da demonstra√ß√£o",
                    "grande_publico": "Demonstra√ß√£o ampliada",
                    "intimista": "Demonstra√ß√£o personalizada"
                },
                "plano_b": "Ter exemplo backup preparado"
            }
        ]


    def _load_proof_types(self) -> Dict[str, Dict[str, Any]]:
        """Carrega tipos de provas visuais"""
        return {
            'antes_depois': {
                'nome': 'Transforma√ß√£o Antes/Depois',
                'objetivo': 'Mostrar transforma√ß√£o clara e mensur√°vel',
                'impacto': 'Alto',
                'facilidade': 'M√©dia'
            },
            'comparacao_competitiva': {
                'nome': 'Compara√ß√£o vs Concorr√™ncia',
                'objetivo': 'Demonstrar superioridade clara',
                'impacto': 'Alto',
                'facilidade': 'Alta'
            },
            'timeline_resultados': {
                'nome': 'Timeline de Resultados',
                'objetivo': 'Mostrar progress√£o temporal',
                'impacto': 'M√©dio',
                'facilidade': 'Alta'
            },
            'social_proof_visual': {
                'nome': 'Prova Social Visual',
                'objetivo': 'Valida√ß√£o atrav√©s de terceiros',
                'impacto': 'Alto',
                'facilidade': 'M√©dia'
            },
            'demonstracao_processo': {
                'nome': 'Demonstra√ß√£o do Processo',
                'objetivo': 'Mostrar como funciona na pr√°tica',
                'impacto': 'M√©dio',
                'facilidade': 'Baixa'
            }
        }

    def _load_visual_elements(self) -> Dict[str, List[str]]:
        """Carrega elementos visuais dispon√≠veis"""
        return {
            'graficos': ['Barras', 'Linhas', 'Pizza', '√Årea', 'Dispers√£o'],
            'comparacoes': ['Lado a lado', 'Sobreposi√ß√£o', 'Timeline', 'Tabela'],
            'depoimentos': ['V√≠deo', 'Texto', '√Åudio', 'Screenshot'],
            'demonstracoes': ['Screencast', 'Fotos', 'Infogr√°fico', 'Anima√ß√£o'],
            'dados': ['N√∫meros', 'Percentuais', 'Valores', 'M√©tricas']
        }

    def generate_complete_proofs_system(
        self,
        concepts_to_prove: List[str],
        avatar_data: Dict[str, Any],
        context_data: Dict[str, Any]
    ) -> List[Dict[str, Any]]:
        """Gera sistema completo de provas visuais"""

        # Valida√ß√£o cr√≠tica de entrada
        if not concepts_to_prove:
            logger.error("‚ùå Nenhum conceito para provar")
            raise ValueError("PROVAS VISUAIS FALHARAM: Nenhum conceito fornecido")

        if not context_data.get('segmento'):
            logger.error("‚ùå Segmento n√£o informado")
            raise ValueError("PROVAS VISUAIS FALHARAM: Segmento obrigat√≥rio")

        segmento = context_data.get('segmento') # Obter segmento para uso no fallback

        try:
            logger.info(f"üé≠ Gerando provas visuais para {len(concepts_to_prove)} conceitos")

            # Salva dados de entrada imediatamente
            salvar_etapa("provas_entrada", {
                "concepts_to_prove": concepts_to_prove,
                "avatar_data": avatar_data,
                "context_data": context_data
            }, categoria="provas_visuais")

            # Seleciona conceitos mais importantes
            priority_concepts = self._prioritize_concepts(concepts_to_prove, avatar_data)

            # Gera provas visuais para cada conceito
            visual_proofs = []

            for i, concept in enumerate(priority_concepts[:8]):  # M√°ximo 8 provas
                try:
                    # Chamada corrigida para _generate_visual_proof_for_concept que agora usa ai_manager
                    proof = self._generate_visual_proof_for_concept(concept, avatar_data, context_data, i+1)
                    if proof:
                        visual_proofs.append(proof)
                        # Salva cada prova gerada
                        salvar_etapa(f"prova_{i+1}", proof, categoria="provas_visuais")
                except Exception as e:
                    logger.error(f"‚ùå Erro ao gerar prova para conceito '{concept}': {e}")
                    continue

            if not visual_proofs:
                logger.error("‚ùå Nenhuma prova visual gerada")
                # Usa provas padr√£o em vez de falhar
                logger.warning("üîÑ Usando provas visuais padr√£o")
                visual_proofs = self._get_default_visual_proofs(context_data)

            # Salva provas visuais finais
            salvar_etapa("provas_finais", visual_proofs, categoria="provas_visuais")

            logger.info(f"‚úÖ {len(visual_proofs)} provas visuais geradas com sucesso")
            return visual_proofs

        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar provas visuais: {str(e)}")
            salvar_erro("provas_sistema", e, contexto={"segmento": context_data.get('segmento')})

            # Fallback para provas b√°sicas
            logger.warning("üîÑ Gerando provas visuais b√°sicas como fallback...")
            return self._get_default_visual_proofs(context_data)

    def _prioritize_concepts(self, concepts: List[str], avatar_data: Dict[str, Any]) -> List[str]:
        """Prioriza conceitos baseado no avatar"""

        # Dores t√™m prioridade alta
        dores = avatar_data.get('dores_viscerais', [])
        desejos = avatar_data.get('desejos_secretos', [])

        prioritized = []

        # Adiciona dores primeiro
        if isinstance(dores, list):
            for i, dor in enumerate(dores[:3]):  # Top 3 dores
                if isinstance(dor, dict) and 'conceito' in dor:
                    prioritized.append(dor['conceito'])
                elif isinstance(dor, str):
                    prioritized.append(dor)

        # Adiciona desejos
        if isinstance(desejos, list):
            for i, desejo in enumerate(desejos[:3]):  # Top 3 desejos
                if isinstance(desejo, dict) and 'conceito' in desejo:
                    prioritized.append(desejo['conceito'])
                elif isinstance(desejo, str):
                    prioritized.append(desejo)

        # Adiciona conceitos restantes
        for concept in concepts:
            if concept not in prioritized:
                prioritized.append(concept)

        return prioritized

    def _generate_visual_proof_for_concept(
        self,
        concept: str,
        avatar_data: Dict[str, Any],
        context_data: Dict[str, Any],
        proof_number: int
    ) -> Optional[Dict[str, Any]]:
        """Gera prova visual para um conceito espec√≠fico"""

        try:
            segmento = context_data.get('segmento', 'neg√≥cios')
            produto = context_data.get('produto', 'produto') # Adicionado para fallback

            # Seleciona tipo de prova mais adequado
            proof_type = self._select_best_proof_type(concept, avatar_data)

            # Gera prova usando IA
            prompt = f"""
Crie uma prova visual espec√≠fica para o conceito: "{concept}"

SEGMENTO: {segmento}
TIPO DE PROVA: {proof_type['nome']}
OBJETIVO: {proof_type['objetivo']}

RETORNE APENAS JSON V√ÅLIDO:

```json
{{
  "nome": "PROVI {proof_number}: Nome espec√≠fico da prova",
  "conceito_alvo": "{concept}",
  "tipo_prova": "{proof_type['nome']}",
  "experimento": "Descri√ß√£o detalhada do experimento visual",
  "materiais": [
    "Material 1 espec√≠fico",
    "Material 2 espec√≠fico",
    "Material 3 espec√≠fico"
  ],
  "roteiro_completo": {{
    "preparacao": "Como preparar a prova",
    "execucao": "Como executar a demonstra√ß√£o",
    "impacto_esperado": "Qual rea√ß√£o esperar"
  }},
  "metricas_sucesso": [
    "M√©trica 1 de sucesso",
    "M√©trica 2 de sucesso"
  ]
}}
"""
            # Prepara contexto completo para a an√°lise
            full_context = {
                'segmento': segmento,
                'produto': produto,
                'dados_contexto': avatar_data # Avatar data √© mais relevante aqui
            }

            # Gera provas visuais usando IA com assinatura correta
            response = self.ai_manager.generate_analysis(
                prompt=prompt,
                model=None,
                context=full_context
            )

            # Valida√ß√£o robusta da resposta
            if response is None:
                logger.warning("‚ö†Ô∏è AI Manager retornou resposta None - usando fallback")
                provas_visuais = self._generate_fallback_proofs(segmento, produto)
            elif isinstance(response, dict) and 'provas_visuais' in response:
                provas_visuais = response['provis_detalhadas'] # Corre√ß√£o: Acessar a chave correta
            elif isinstance(response, str):
                # Tenta parsear se for uma string contendo JSON
                try:
                    clean_response = response.strip()
                    if "```json" in clean_response:
                        start = clean_response.find("```json") + 7
                        end = clean_response.rfind("```")
                        clean_response = clean_response[start:end].strip()

                    proof = json.loads(clean_response)
                    logger.info(f"‚úÖ Prova visual {proof_number} gerada com IA")
                    return proof # Retorna a prova individualmente
                except json.JSONDecodeError:
                    logger.warning(f"‚ö†Ô∏è IA retornou JSON inv√°lido para prova {proof_number}")
                    return self._create_basic_proof(concept, proof_type, proof_number, context_data)
            else:
                logger.warning(f"‚ö†Ô∏è Resposta inesperada do AI Manager: {type(response)} - usando fallback")
                provas_visuais = self._generate_fallback_proofs(segmento, produto)

            # Se chegou aqui, significa que a resposta foi uma lista de provas
            if provas_visuais and isinstance(provas_visuais, list):
                # Retorna a primeira prova da lista se a chamada foi para gerar uma √∫nica prova
                if provas_visuais:
                    return provas_visuais[0]
                else:
                    return self._create_basic_proof(concept, proof_type, proof_number, context_data)
            else:
                # Fallback para prova b√°sica se a estrutura da resposta n√£o for a esperada
                return self._create_basic_proof(concept, proof_type, proof_number, context_data)


        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar prova visual: {str(e)}")
            return self._create_basic_proof(concept, proof_type, proof_number, context_data)

    def _select_best_proof_type(self, concept: str, avatar_data: Dict[str, Any]) -> Dict[str, Any]:
        """Seleciona melhor tipo de prova para o conceito"""

        concept_lower = concept.lower()

        # Mapeia conceitos para tipos de prova
        if any(word in concept_lower for word in ['resultado', 'crescimento', 'melhoria']):
            return self.proof_types['antes_depois']
        elif any(word in concept_lower for word in ['concorrente', 'melhor', 'superior']):
            return self.proof_types['comparacao_competitiva']
        elif any(word in concept_lower for word in ['tempo', 'rapidez', 'velocidade']):
            return self.proof_types['timeline_resultados']
        elif any(word in concept_lower for word in ['outros', 'clientes', 'pessoas']):
            return self.proof_types['social_proof_visual']
        else:
            return self.proof_types['demonstracao_processo']

    def _create_basic_proof(
        self,
        concept: str,
        proof_type: Dict[str, Any],
        proof_number: int,
        context_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Cria prova visual b√°sica"""

        segmento = context_data.get('segmento', 'neg√≥cios')
        produto = context_data.get('produto', 'produto') # Adicionado para consist√™ncia

        return {
            'nome': f'PROVI {proof_number}: {proof_type["nome"]} para {segmento}',
            'conceito_alvo': concept,
            'tipo_prova': proof_type['nome'],
            'experimento': f'Demonstra√ß√£o visual do conceito "{concept}" atrav√©s de {proof_type["nome"].lower()} espec√≠fica para {segmento}',
            'materiais': [
                'Gr√°ficos comparativos',
                'Dados num√©ricos',
                'Screenshots de resultados',
                'Depoimentos visuais'
            ],
            'roteiro_completo': {
                'preparacao': f'Prepare materiais visuais que demonstrem {concept} no contexto de {segmento}',
                'execucao': f'Apresente a prova visual de forma clara e impactante',
                'impacto_esperado': 'Redu√ß√£o de ceticismo e aumento de confian√ßa'
            },
            'metricas_sucesso': [
                'Redu√ß√£o de obje√ß√µes relacionadas ao conceito',
                'Aumento de interesse e engajamento',
                'Acelera√ß√£o do processo de decis√£o'
            ],
            'fallback_mode': True
        }

    def _get_default_visual_proofs(self, context_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Retorna provas visuais padr√£o como fallback"""

        segmento = context_data.get('segmento', 'neg√≥cios')

        return [
            {
                'nome': f'PROVI 1: Resultados Comprovados em {segmento}',
                'conceito_alvo': f'Efic√°cia da metodologia em {segmento}',
                'tipo_prova': 'Antes/Depois',
                'experimento': f'Compara√ß√£o visual de resultados antes e depois da aplica√ß√£o da metodologia em {segmento}',
                'materiais': ['Gr√°ficos de crescimento', 'Dados de performance', 'Screenshots de m√©tricas'],
                'roteiro_completo': {
                    'preparacao': 'Organize dados de clientes que aplicaram a metodologia',
                    'execucao': 'Mostre transforma√ß√£o clara com n√∫meros espec√≠ficos',
                    'impacto_esperado': 'Convencimento atrav√©s de evid√™ncia visual'
                },
                'metricas_sucesso': ['Redu√ß√£o de ceticismo', 'Aumento de interesse']
            },
            {
                'nome': f'PROVI 2: Compara√ß√£o com Mercado em {segmento}',
                'conceito_alvo': f'Superioridade da abordagem em {segmento}',
                'tipo_prova': 'Compara√ß√£o Competitiva',
                'experimento': f'Compara√ß√£o visual entre abordagem tradicional e metodologia espec√≠fica para {segmento}',
                'materiais': ['Tabelas comparativas', 'Gr√°ficos de performance', 'Benchmarks do setor'],
                'roteiro_completo': {
                    'preparacao': 'Colete dados de mercado e benchmarks',
                    'execucao': 'Apresente compara√ß√£o lado a lado',
                    'impacto_esperado': 'Demonstra√ß√£o clara de vantagem competitiva'
                },
                'metricas_sucesso': ['Compreens√£o do diferencial', 'Justificativa de pre√ßo premium']
            },
            {
                'nome': f'PROVI 3: Depoimentos Visuais {segmento}',
                'conceito_alvo': f'Valida√ß√£o social no {segmento}',
                'tipo_prova': 'Prova Social Visual',
                'experimento': f'Compila√ß√£o visual de depoimentos de profissionais de {segmento}',
                'materiais': ['V√≠deos de depoimento', 'Screenshots de resultados', 'Fotos de clientes'],
                'roteiro_completo': {
                    'preparacao': 'Selecione melhores depoimentos com resultados',
                    'execucao': 'Apresente sequ√™ncia de valida√ß√µes sociais',
                    'impacto_esperado': 'Redu√ß√£o de risco percebido'
                },
                'metricas_sucesso': ['Aumento de confian√ßa', 'Redu√ß√£o de obje√ß√µes']
            }
        ]

    def _extract_visual_proofs(self, response_text: str) -> List[Dict[str, Any]]:
        """Extrai provas visuais de uma resposta em texto, assumindo formato JSON."""
        try:
            # Tenta encontrar e parsear o JSON da resposta
            json_start = response_text.find('[')
            json_end = response_text.rfind(']') + 1
            if json_start != -1 and json_end != -1:
                json_string = response_text[json_start:json_end]
                proofs = json.loads(json_string)
                if isinstance(proofs, list):
                    return proofs
            return []
        except Exception as e:
            logger.error(f"‚ùå Erro ao extrair provas visuais do texto: {e}")
            return []

    def _generate_fallback_proofs(self, segmento: str, produto: str) -> List[Dict[str, Any]]:
        """Gera provas visuais b√°sicas quando a IA falha"""

        fallback_proofs = [
            {
                'tipo': 'estatistica',
                'titulo': f'Crescimento do mercado {segmento}',
                'descricao': f'O mercado de {segmento} apresenta tend√™ncia de crescimento',
                'dados': {
                    'crescimento_percentual': '15-25%',
                    'periodo': '√∫ltimos 12 meses'
                },
                'fonte': 'An√°lise de mercado',
                'confiabilidade': 0.7
            },
            {
                'tipo': 'tendencia',
                'titulo': f'Demanda por {produto}',
                'descricao': f'Aumento na procura por solu√ß√µes como {produto}',
                'dados': {
                    'nivel_demanda': 'Alto',
                    'segmento_alvo': segmento
                },
                'fonte': 'Pesquisa web',
                'confiabilidade': 0.6
            },
            {
                'tipo': 'oportunidade',
                'titulo': 'Lacunas no mercado',
                'descricao': f'Oportunidades identificadas para {produto} no segmento {segmento}',
                'dados': {
                    'nivel_oportunidade': 'M√©dio-Alto',
                    'competitividade': 'Moderada'
                },
                'fonte': 'An√°lise competitiva',
                'confiabilidade': 0.5
            }
        ]

        logger.info(f"‚úÖ Geradas {len(fallback_proofs)} provas visuais de fallback")
        return fallback_proofs

    async def criar_arsenal_provis(self, dados_entrada: Dict[str, Any]) -> Dict[str, Any]:
        """Cria arsenal completo de provas visuais transformadoras"""
        try:
            logger.info("üé¨ Iniciando cria√ß√£o de arsenal de PROVIs...")

            # Extrai dados de entrada
            conceitos = dados_entrada.get('conceitos', [])
            avatar = dados_entrada.get('avatar', {})
            formato = dados_entrada.get('formato', 'presencial')
            produto = dados_entrada.get('produto', 'Produto')
            recursos = dados_entrada.get('recursos_disponiveis', [])
            contexto = dados_entrada.get('contexto_apresentacao', {})

            # An√°lise inicial dos conceitos
            analise_inicial = await self._analisar_conceitos_alvo(conceitos, avatar, produto)

            # Cria√ß√£o de PROVIs personalizadas
            provis_criadas = await self._criar_provis_personalizadas(
                conceitos, avatar, formato, analise_inicial
            )

            # Plano de execu√ß√£o
            plano_execucao = await self._criar_plano_execucao(
                provis_criadas, formato, contexto
            )

            # Kit de prepara√ß√£o
            kit_preparacao = await self._criar_kit_preparacao(
                provis_criadas, recursos
            )

            arsenal_completo = {
                "produto": produto,
                "formato": formato,
                "timestamp": datetime.now().isoformat(),
                "analise_inicial": analise_inicial,
                "provis_completas": provis_criadas,
                "plano_execucao": plano_execucao,
                "kit_preparacao": kit_preparacao,
                "metricas_impacto": await self._definir_metricas_impacto(provis_criadas)
            }

            logger.info(f"‚úÖ Arsenal de PROVIs criado com {len(provis_criadas.get('provis', []))} demonstra√ß√µes")
            return arsenal_completo

        except Exception as e:
            logger.error(f"‚ùå Erro ao criar arsenal de PROVIs: {e}")
            return {"erro": str(e)}

    async def _analisar_conceitos_alvo(self, conceitos: List, avatar: Dict, produto: str) -> Dict[str, Any]:
        """An√°lise inicial dos conceitos que precisam ser provados"""

        prompt = f"""
        Como DIRETOR SUPREMO DE EXPERI√äNCIAS TRANSFORMADORAS, analise os conceitos que precisam ser provados:

        PRODUTO: {produto}
        CONCEITOS A PROVAR: {json.dumps(conceitos, indent=2)}
        AVATAR: {json.dumps(avatar, indent=2)}

        CATEGORIAS DE PROVIS DISPON√çVEIS:
        {json.dumps(self.categorias_provis, indent=2)}

        Realize an√°lise estruturada:

        1. CONCEITOS IDENTIFICADOS
        - Liste todos os conceitos abstratos cr√≠ticos
        - Classifique por dificuldade de prova
        - Priorize por impacto na decis√£o
        - Identifique conceitos secund√°rios

        2. PRIORIZA√á√ÉO POR IMPACTO
        - Conceitos de m√°ximo impacto (must-have)
        - Conceitos de impacto m√©dio (should-have)
        - Conceitos de apoio (nice-to-have)
        - Sequ√™ncia psicol√≥gica otimizada

        3. MOMENTOS ESTRAT√âGICOS MAPEADOS
        - Quando demonstrar cada conceito
        - Sequ√™ncia ideal de revela√ß√£o
        - Momentos de m√°xima receptividade
        - Pontos de ancoragem emocional

        4. CATEGORIZA√á√ÉO POR TIPO DE PROVI
        - Que categoria usar para cada conceito
        - Justificativa da escolha
        - Impacto emocional esperado
        - Complexidade de execu√ß√£o

        Seja estrat√©gico e psicologicamente preciso.
        """

        try:
            resposta = await ai_manager.gerar_resposta_com_fallback(prompt, "gemini")
            return {
                "analise_completa": resposta,
                "conceitos_analisados": len(conceitos),
                "processado_em": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"Erro na an√°lise de conceitos: {e}")
            return {"erro": str(e)}

    async def _criar_provis_personalizadas(self, conceitos: List, avatar: Dict, formato: str, analise: Dict) -> Dict[str, Any]:
        """Cria PROVIs personalizadas para cada conceito"""

        prompt = f"""
        Como DIRETOR SUPREMO DE EXPERI√äNCIAS TRANSFORMADORAS, crie PROVIs completas:

        CONCEITOS: {json.dumps(conceitos, indent=2)}
        AVATAR: {json.dumps(avatar, indent=2)}
        FORMATO: {formato}
        AN√ÅLISE PR√âVIA: {json.dumps(analise, indent=2)}

        MATERIAIS B√ÅSICOS DISPON√çVEIS:
        {json.dumps(self.materiais_basicos)}

        Para cada conceito principal (3-5), crie PROVI COMPLETA com:

        1. NOME IMPACTANTE DA PROVI

        2. CONCEITO-ALVO
        - Que conceito abstrato est√° provando
        - Por que este conceito √© cr√≠tico
        - Como se conecta ao produto/avatar

        3. CATEGORIA E PRIORIDADE
        - Categoria da PROVI (URG√äNCIA, M√âTODO, etc.)
        - N√≠vel de prioridade (1-5)
        - Impacto emocional esperado (1-10)

        4. MOMENTO IDEAL DE APLICA√á√ÉO
        - Quando usar na apresenta√ß√£o
        - Contexto emocional adequado
        - Dura√ß√£o recomendada
        - Transi√ß√µes necess√°rias

        5. OBJETIVO PSICOL√ìGICO ESPEC√çFICO
        - Que estado mental criar
        - Que emo√ß√µes ativar
        - Que cren√ßas instalar
        - Que resist√™ncias quebrar

        6. EXPERIMENTO ESCOLHIDO
        - Demonstra√ß√£o f√≠sica espec√≠fica
        - Materiais necess√°rios exatos
        - Prepara√ß√£o pr√©via necess√°ria
        - Pontos de aten√ß√£o cr√≠ticos

        7. ANALOGIA PERFEITA
        - Como conectar o experimento ao conceito
        - Ponte l√≥gica clara
        - Linguagem de conex√£o
        - Met√°foras poderosas

        8. ROTEIRO COMPLETO (SETUP, EXECU√á√ÉO, CL√çMAX, BRIDGE)
        - SETUP: Como introduzir (30 seg)
        - EXECU√á√ÉO: Passo a passo detalhado (2-3 min)
        - CL√çMAX: Momento de revela√ß√£o (30 seg)
        - BRIDGE: Como conectar ao pr√≥ximo elemento (30 seg)

        9. MATERIAIS NECESS√ÅRIOS EXATOS
        - Lista espec√≠fica de materiais
        - Onde conseguir cada item
        - Alternativas em caso de falta
        - Custo estimado total

        10. VARIA√á√ïES POR FORMATO
        - Adapta√ß√£o para presencial
        - Adapta√ß√£o para online
        - Vers√£o simplificada
        - Vers√£o premium

        11. GEST√ÉO DE RISCOS
        - O que pode dar errado
        - Como prevenir problemas
        - Plano B em caso de falha
        - Recovery de falhas

        12. FRASES DE IMPACTO
        - 3-5 frases poderosas para usar
        - Timing de cada frase
        - Tom e √™nfase recomendados
        - Varia√ß√µes por rea√ß√£o da audi√™ncia

        Seja extremamente espec√≠fico e acion√°vel. Cada PROVI deve ser execut√°vel imediatamente.
        """

        try:
            resposta = await ai_manager.gerar_resposta_com_fallback(prompt, "gemini")
            return {
                "provis_detalhadas": resposta,
                "total_provis": "3-5",
                "formato": formato,
                "criado_em": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"Erro ao criar PROVIs personalizadas: {e}")
            return {"erro": str(e)}

    async def _criar_plano_execucao(self, provis: Dict, formato: str, contexto: Dict) -> Dict[str, Any]:
        """Cria plano de execu√ß√£o das PROVIs"""

        prompt = f"""
        Como DIRETOR SUPREMO DE EXPERI√äNCIAS TRANSFORMADORAS, crie plano de execu√ß√£o:

        PROVIS CRIADAS: {json.dumps(provis, indent=2)}
        FORMATO: {formato}
        CONTEXTO: {json.dumps(contexto, indent=2)}

        Crie plano com:

        1. SEQU√äNCIA OTIMIZADA
        - Ordem ideal das PROVIs
        - Justificativa psicol√≥gica da sequ√™ncia
        - Timing entre demonstra√ß√µes
        - Pontos de respira√ß√£o

        2. TIMELINE DETALHADO
        - Cronograma minuto a minuto
        - Tempo de prepara√ß√£o de cada PROVI
        - Buffer para imprevistos
        - Momentos de check emocional

        3. NARRATIVA CONECTORA
        - Como conectar uma PROVI √† pr√≥xima
        - Frases de transi√ß√£o
        - Fio narrativo condutor
        - Escalada emocional

        4. M√âTRICAS DE SUCESSO
        - Como medir impacto de cada PROVI
        - Sinais de que funcionou
        - Indicadores de resist√™ncia
        - Momento de refor√ßar ou avan√ßar

        Seja extremamente pr√°tico para execu√ß√£o ao vivo.
        """

        try:
            resposta = await ai_manager.gerar_resposta_com_fallback(prompt, "gemini")
            return {
                "plano_completo": resposta,
                "formato": formato,
                "criado_em": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"Erro ao criar plano de execu√ß√£o: {e}")
            return {"erro": str(e)}

    async def _criar_kit_preparacao(self, provis: Dict, recursos: List) -> Dict[str, Any]:
        """Cria kit completo de prepara√ß√£o"""

        prompt = f"""
        Como DIRETOR SUPREMO DE EXPERI√äNCIAS TRANSFORMADORAS, crie kit de prepara√ß√£o:

        PROVIS: {json.dumps(provis, indent=2)}
        RECURSOS DISPON√çVEIS: {json.dumps(recursos, indent=2)}

        Crie kit com:

        1. LISTA MESTRE DE MATERIAIS
        - Todos os materiais necess√°rios
        - Quantidades exatas
        - Especifica√ß√µes t√©cnicas
        - Fornecedores recomendados

        2. CHECKLIST DE PREPARA√á√ÉO
        - Prepara√ß√£o 1 semana antes
        - Prepara√ß√£o 1 dia antes
        - Prepara√ß√£o 1 hora antes
        - Checklist final pr√©-apresenta√ß√£o

        3. ENSAIO RECOMENDADO
        - Como praticar cada PROVI
        - Pontos cr√≠ticos para dominar
        - Timing a cronometrar
        - Varia√ß√µes para testar

        4. TROUBLESHOOTING
        - Problemas mais comuns
        - Solu√ß√µes r√°pidas
        - Backup plans
        - Recovery de falhas

        Seja ultrapr√°tico para execu√ß√£o real.
        """

        try:
            resposta = await ai_manager.gerar_resposta_com_fallback(prompt, "gemini")
            return {
                "kit_completo": resposta,
                "recursos_considerados": len(recursos),
                "criado_em": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"Erro ao criar kit de prepara√ß√£o: {e}")
            return {"erro": str(e)}

    async def _definir_metricas_impacto(self, provis: Dict) -> Dict[str, Any]:
        """Define m√©tricas de impacto das PROVIs"""

        return {
            "metricas_imediatas": [
                "Rea√ß√£o emocional vis√≠vel da audi√™ncia",
                "N√≠vel de aten√ß√£o durante execu√ß√£o",
                "Intera√ß√µes/coment√°rios gerados",
                "Linguagem corporal de engajamento"
            ],
            "metricas_comportamentais": [
                "Perguntas feitas ap√≥s PROVI",
                "Tempo de perman√™ncia no assunto",
                "Qualidade das intera√ß√µes",
                "Mudan√ßa no tom da conversa"
            ],
            "metricas_conversao": [
                "Taxa de progress√£o no funil",
                "Qualidade das obje√ß√µes (mais espec√≠ficas)",
                "N√≠vel de interesse demonstrado",
                "Solicita√ß√µes de informa√ß√£o adicional"
            ],
            "indicadores_falha": [
                "Dispers√£o da aten√ß√£o",
                "Questionamentos t√©cnicos excessivos",
                "Ceticismo vis√≠vel",
                "Desengajamento s√∫bito"
            ],
            "protocolo_ajuste": {
                "frequencia_medicao": "Durante execu√ß√£o de cada PROVI",
                "responsavel": "Apresentador principal",
                "acoes_corretivas": "Ajuste de intensidade ou mudan√ßa de PROVI",
                "documentacao": "Log p√≥s-apresenta√ß√£o para otimiza√ß√£o"
            }
        }


# Inst√¢ncia global
visual_proofs_generator = VisualProofsGenerator()