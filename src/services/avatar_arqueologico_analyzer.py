
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Arque√≥logo do Avatar
Sistema avan√ßado para an√°lise profunda de avatares
"""

import logging
import json
from datetime import datetime
from typing import Dict, List, Optional, Any
from services.ai_manager import ai_manager

logger = logging.getLogger(__name__)

class AvatarArqueologicoAnalyzer:
    """Arque√≥logo especializado em an√°lise profunda de avatares"""

    def __init__(self):
        self.dimensoes_analise = {
            "demografica": ["idade", "genero", "localizacao", "renda", "educacao"],
            "psicografica": ["valores", "cren√ßas", "personalidade", "estilo_vida"],
            "comportamental": ["habitos", "padroes_compra", "canais_preferidos"],
            "emocional": ["dores", "desejos", "medos", "frustracoes"],
            "social": ["influencias", "grupos", "status", "aspiracoes"]
        }
        
    async def criar_dashboard_arqueologico(self, dados_entrada: Dict[str, Any]) -> Dict[str, Any]:
        """Cria dashboard arqueol√≥gico completo do avatar"""
        try:
            logger.info("üè∫ Iniciando an√°lise arqueol√≥gica do avatar...")
            
            # Extrai dados de entrada
            pesquisas = dados_entrada.get('pesquisas', [])
            interacoes = dados_entrada.get('interacoes', [])
            contexto = dados_entrada.get('contexto', {})
            produto = dados_entrada.get('produto', 'Produto')
            
            # An√°lise multidimensional
            perfil_demografico = await self._analisar_dimensao_demografica(pesquisas)
            analise_dores = await self._analisar_dores_profundas(pesquisas, interacoes)
            desejos_motivacoes = await self._analisar_desejos_motivacoes(pesquisas)
            comportamento = await self._analisar_comportamento(interacoes, pesquisas)
            insights_ocultos = await self._descobrir_insights_ocultos(
                perfil_demografico, analise_dores, desejos_motivacoes, comportamento
            )
            
            # Cria√ß√£o do avatar final
            avatar_consolidado = await self._consolidar_avatar(
                perfil_demografico, analise_dores, desejos_motivacoes, 
                comportamento, insights_ocultos, produto
            )
            
            dashboard = {
                "produto": produto,
                "timestamp": datetime.now().isoformat(),
                "perfil_demografico_psicografico": perfil_demografico,
                "analise_dores": analise_dores,
                "desejos_motivacoes": desejos_motivacoes, 
                "comportamento": comportamento,
                "insights_ocultos_recomendacoes": insights_ocultos,
                "avatar_consolidado": avatar_consolidado,
                "metricas_confianca": await self._calcular_metricas_confianca(pesquisas, interacoes)
            }
            
            logger.info("‚úÖ Dashboard arqueol√≥gico criado com sucesso")
            return dashboard
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar dashboard arqueol√≥gico: {e}")
            return {"erro": str(e)}
    
    async def _analisar_dimensao_demografica(self, pesquisas: List) -> Dict[str, Any]:
        """An√°lise demogr√°fica e psicogr√°fica detalhada"""
        
        prompt = f"""
        Como ARQUE√ìLOGO DO AVATAR, analise os dados demogr√°ficos e psicogr√°ficos:
        
        DADOS DE PESQUISAS: {json.dumps(pesquisas[:5], indent=2) if pesquisas else "N√£o dispon√≠vel"}
        
        Forne√ßa an√°lise estruturada:
        
        1. DISTRIBUI√á√ÉO POR FATURAMENTO/SEGMENTO
        - Faixas de faturamento predominantes
        - Segmentos de neg√≥cio mais comuns
        - Correla√ß√µes entre faturamento e desafios
        
        2. PRINCIPAIS DESAFIOS IDENTIFICADOS
        - Top 5 desafios mais mencionados
        - Desafios por segmento de faturamento
        - Intensidade emocional de cada desafio
        
        3. ARQU√âTIPOS DOMINANTES
        - Personalidades predominantes
        - Padr√µes de comportamento
        - Estilos de lideran√ßa
        
        4. MEDOS QUE PARALISAM DECIS√ïES
        - Medos mais frequentes
        - Como estes medos afetam decis√µes
        - Padr√µes de autossabotagem
        
        Seja detalhado e baseado em dados reais.
        """
        
        try:
            resposta = await ai_manager.gerar_resposta_com_fallback(prompt, "gemini")
            return {
                "analise_completa": resposta,
                "processado_em": datetime.now().isoformat(),
                "fonte_dados": len(pesquisas)
            }
        except Exception as e:
            logger.error(f"Erro na an√°lise demogr√°fica: {e}")
            return {"erro": str(e)}
    
    async def _analisar_dores_profundas(self, pesquisas: List, interacoes: List) -> Dict[str, Any]:
        """An√°lise profunda das dores do avatar"""
        
        prompt = f"""
        Como ARQUE√ìLOGO DO AVATAR, realize an√°lise forense das dores:
        
        PESQUISAS: {json.dumps(pesquisas[:3], indent=2) if pesquisas else "N√£o dispon√≠vel"}
        INTERA√á√ïES: {json.dumps(interacoes[:3], indent=2) if interacoes else "N√£o dispon√≠vel"}
        
        Analise as dores em 4 dimens√µes:
        
        1. TOP 5 DORES ESTRUTURADAS (com frequ√™ncia %)
        - Dor espec√≠fica
        - Frequ√™ncia de men√ß√£o
        - Intensidade emocional (1-10)
        - Contexto de manifesta√ß√£o
        - Impacto na vida/neg√≥cio
        
        2. DORES ABERTAS vs ESTRUTURADAS
        - Dores que as pessoas falam abertamente
        - Dores que elas escondem ou minimizam
        - Dores que nem sabem que t√™m
        - Discrep√¢ncias entre discurso e realidade
        
        3. AN√ÅLISE COMPARATIVA
        - Dores por faixa de faturamento
        - Dores por tipo de neg√≥cio
        - Evolu√ß√£o das dores ao longo do tempo
        - Correla√ß√µes ocultas
        
        4. INSIGHTS OCULTOS
        - Padr√µes n√£o √≥bvios identificados
        - Contradi√ß√µes reveladas
        - Dores sist√™micas vs pontuais
        - Oportunidades de interven√ß√£o
        
        Seja visceral e direto. Mergulhe no que realmente d√≥i.
        """
        
        try:
            resposta = await ai_manager.gerar_resposta_com_fallback(prompt, "gemini")
            return {
                "analise_dores": resposta,
                "processado_em": datetime.now().isoformat(),
                "fontes_analisadas": len(pesquisas) + len(interacoes)
            }
        except Exception as e:
            logger.error(f"Erro na an√°lise de dores: {e}")
            return {"erro": str(e)}
    
    async def _analisar_desejos_motivacoes(self, pesquisas: List) -> Dict[str, Any]:
        """An√°lise profunda de desejos e motiva√ß√µes"""
        
        prompt = f"""
        Como ARQUE√ìLOGO DO AVATAR, desvende os desejos mais profundos:
        
        DADOS: {json.dumps(pesquisas[:3], indent=2) if pesquisas else "N√£o dispon√≠vel"}
        
        Analise em 4 dimens√µes:
        
        1. SONHOS MAIS PROFUNDOS
        - O que realmente querem alcan√ßar
        - Vis√£o de futuro ideal
        - Estados emocionais desejados
        - S√≠mbolos de sucesso para eles
        
        2. DESEJOS EXPRESSOS DIRETAMENTE
        - O que falam que querem
        - Objetivos declarados
        - Metas mencionadas
        - Aspira√ß√µes verbalizadas
        
        3. CONTRADI√á√ïES IDENTIFICADAS
        - Discrep√¢ncias entre fala e comportamento
        - Desejos conflitantes
        - Autossabotagem inconsciente
        - Resist√™ncias internas
        
        4. HIERARQUIA DE DESEJOS
        - Desejos prim√°rios (mais urgentes)
        - Desejos secund√°rios (importantes mas n√£o urgentes)
        - Desejos ocultos (n√£o verbalizados)
        - Motiva√ß√µes verdadeiras vs aparentes
        
        Seja psicol√≥gico e profundo.
        """
        
        try:
            resposta = await ai_manager.gerar_resposta_com_fallback(prompt, "gemini")
            return {
                "analise_desejos": resposta,
                "processado_em": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"Erro na an√°lise de desejos: {e}")
            return {"erro": str(e)}
    
    async def _analisar_comportamento(self, interacoes: List, pesquisas: List) -> Dict[str, Any]:
        """An√°lise comportamental detalhada"""
        
        prompt = f"""
        Como ARQUE√ìLOGO DO AVATAR, analise padr√µes comportamentais:
        
        INTERA√á√ïES: {json.dumps(interacoes[:3], indent=2) if interacoes else "N√£o dispon√≠vel"}
        PESQUISAS: {json.dumps(pesquisas[:3], indent=2) if pesquisas else "N√£o dispon√≠vel"}
        
        Forne√ßa an√°lise em 4 √°reas:
        
        1. ARQU√âTIPOS DOMINANTES
        - Personalidades mais comuns
        - Estilos de comunica√ß√£o
        - Padr√µes de tomada de decis√£o
        - Influ√™ncias que seguem
        
        2. MEDOS QUE PARALISAM
        - Medos mais frequentes
        - Como se manifestam comportamentalmente
        - Mecanismos de defesa
        - Padr√µes de evita√ß√£o
        
        3. OBJE√á√ïES REAIS (n√£o as √≥bvias)
        - Resist√™ncias verdadeiras
        - Obje√ß√µes n√£o verbalizadas
        - Desculpas vs raz√µes reais
        - Gatilhos de resist√™ncia
        
        4. PADR√ïES DE DECIS√ÉO
        - Como tomam decis√µes importantes
        - Influ√™ncias externas cr√≠ticas
        - Tempo de matura√ß√£o t√≠pico
        - Fatores determinantes finais
        
        Foque nos padr√µes invis√≠veis.
        """
        
        try:
            resposta = await ai_manager.gerar_resposta_com_fallback(prompt, "gemini")
            return {
                "analise_comportamental": resposta,
                "processado_em": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"Erro na an√°lise comportamental: {e}")
            return {"erro": str(e)}
    
    async def _descobrir_insights_ocultos(self, perfil: Dict, dores: Dict, desejos: Dict, comportamento: Dict) -> Dict[str, Any]:
        """Descobre insights ocultos e gera recomenda√ß√µes"""
        
        prompt = f"""
        Como ARQUE√ìLOGO DO AVATAR, descubra insights ocultos e gere recomenda√ß√µes:
        
        PERFIL: {json.dumps(perfil, indent=2)}
        DORES: {json.dumps(dores, indent=2)}
        DESEJOS: {json.dumps(desejos, indent=2)}
        COMPORTAMENTO: {json.dumps(comportamento, indent=2)}
        
        Gere insights e recomenda√ß√µes em 4 dimens√µes:
        
        1. GATILHOS EMOCIONAIS EFICAZES
        - Top 5 gatilhos mais poderosos
        - Como ativar cada gatilho
        - Momentos ideais de aplica√ß√£o
        - Palavras/frases que funcionam
        
        2. ABORDAGENS DE MAIOR IMPACTO
        - Estrat√©gias de comunica√ß√£o mais eficazes
        - √Çngulos que geram mais conex√£o
        - Formatos de conte√∫do preferidos
        - Timing ideal de abordagem
        
        3. LINGUAGEM RECOMENDADA
        - Palavras que ressoam
        - Termos que devem evitar
        - Tom de voz adequado
        - Met√°foras poderosas
        
        4. ESTRAT√âGIAS DE POSICIONAMENTO
        - Como se posicionar diante deste avatar
        - Que autoridade demonstrar
        - Como construir confian√ßa
        - Diferencia√ß√£o estrat√©gica
        
        Seja estrat√©gico e acion√°vel.
        """
        
        try:
            resposta = await ai_manager.gerar_resposta_com_fallback(prompt, "gemini")
            return {
                "insights_recomendacoes": resposta,
                "processado_em": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"Erro ao descobrir insights: {e}")
            return {"erro": str(e)}
    
    async def _consolidar_avatar(self, perfil: Dict, dores: Dict, desejos: Dict, comportamento: Dict, insights: Dict, produto: str) -> Dict[str, Any]:
        """Consolida todas as an√°lises em um avatar final"""
        
        prompt = f"""
        Como ARQUE√ìLOGO DO AVATAR, consolide todas as an√°lises em UM AVATAR FINAL visceral:
        
        PRODUTO: {produto}
        PERFIL: {json.dumps(perfil, indent=2)}
        DORES: {json.dumps(dores, indent=2)}
        DESEJOS: {json.dumps(desejos, indent=2)}
        COMPORTAMENTO: {json.dumps(comportamento, indent=2)}
        INSIGHTS: {json.dumps(insights, indent=2)}
        
        Crie AVATAR CONSOLIDADO com:
        
        1. NOME FICT√çCIO REPRESENTATIVO
        
        2. PERFIL DEMOGR√ÅFICO E PSICOGR√ÅFICO
        - Idade, localiza√ß√£o, faturamento
        - Personalidade dominante
        - Contexto de vida/neg√≥cio
        
        3. JORNADA DE DOR DETALHADA
        - Como chegou onde est√°
        - Tentativas anteriores de solu√ß√£o
        - Frustra√ß√µes acumuladas
        - Estado atual de desesperan√ßa
        
        4. DORES SECRETAS E INCONFESS√ÅVEIS
        - O que nunca admite publicamente
        - Vergonhas que carrega
        - Medos que paralizam
        - Sentimentos de inadequa√ß√£o
        
        5. DESEJOS ARDENTES E PROIBIDOS
        - O que realmente quer
        - Fantasias de transforma√ß√£o
        - Estados desejados
        - S√≠mbolos de sucesso
        
        6. MEDOS PARALISANTES
        - Que cen√°rios evita
        - Autossabotagens comuns
        - Resist√™ncias internas
        - Mecanismos de defesa
        
        7. FRUSTRA√á√ïES DI√ÅRIAS
        - Irrita√ß√µes constantes
        - Problemas recorrentes
        - Fontes de estresse
        - Ciclos viciosos
        
        8. LINGUAGEM INTERNA E EXTERNA
        - Como pensa para si mesmo
        - Como se expressa para outros
        - Palavras que usa
        - Tom emocional t√≠pico
        
        9. OBJE√á√ïES REAIS
        - Resist√™ncias verdadeiras
        - Desculpas que usa
        - Mecanismos de procrastina√ß√£o
        - Justificativas para n√£o agir
        
        10. DIA PERFEITO E PIOR PESADELO
        - Vis√£o de futuro ideal
        - Cen√°rio que mais teme
        - Contrastes emocionais
        - Motiva√ß√£o por prazer vs dor
        
        Seja visceral, espec√≠fico e memor√°vel. Este avatar precisa ser T√ÉO REAL que qualquer pessoa da equipe o reconheceria na rua.
        """
        
        try:
            resposta = await ai_manager.gerar_resposta_com_fallback(prompt, "gemini")
            return {
                "avatar_final": resposta,
                "consolidado_em": datetime.now().isoformat(),
                "nivel_detalhamento": "maximo"
            }
        except Exception as e:
            logger.error(f"Erro ao consolidar avatar: {e}")
            return {"erro": str(e)}
    
    async def _calcular_metricas_confianca(self, pesquisas: List, interacoes: List) -> Dict[str, Any]:
        """Calcula m√©tricas de confian√ßa da an√°lise"""
        
        total_dados = len(pesquisas) + len(interacoes)
        
        if total_dados >= 10:
            nivel_confianca = "Alto"
        elif total_dados >= 5:
            nivel_confianca = "M√©dio"
        else:
            nivel_confianca = "Baixo"
            
        return {
            "total_dados_analisados": total_dados,
            "pesquisas": len(pesquisas),
            "interacoes": len(interacoes),
            "nivel_confianca": nivel_confianca,
            "recomendacao": self._get_recomendacao_confianca(nivel_confianca),
            "calculado_em": datetime.now().isoformat()
        }
    
    def _get_recomendacao_confianca(self, nivel: str) -> str:
        """Retorna recomenda√ß√£o baseada no n√≠vel de confian√ßa"""
        recomendacoes = {
            "Alto": "Avatar possui alta confiabilidade. Pode ser usado para estrat√©gias cr√≠ticas.",
            "M√©dio": "Avatar possui confiabilidade adequada. Recomendado validar com mais dados.",
            "Baixo": "Avatar possui baixa confiabilidade. Colete mais dados antes de usar estrat√©gias cr√≠ticas."
        }
        return recomendacoes.get(nivel, "N√≠vel de confian√ßa desconhecido")

# Inst√¢ncia global
avatar_arqueologico_analyzer = AvatarArqueologicoAnalyzer()
